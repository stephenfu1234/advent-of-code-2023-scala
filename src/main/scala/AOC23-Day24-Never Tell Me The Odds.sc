
val sampleInput = "19, 13, 30 @ -2,  1, -2\n18, 19, 22 @ -1, -1, -2\n20, 25, 34 @ -2, -2, -4\n12, 31, 28 @ -1, -2, -1\n20, 19, 15 @  1, -5, -3"
//val sampleInput = "18, 19, 22 @ -1, -1, -2\n12, 31, 28 @ -1, -2, -1"
val puzzleInput = "277903024391745, 368934106615824, 298537551311799 @ -118, -107, 62\n183412557215942, 418647008376557, 219970939624628 @ 72, -215, 133\n378231151165434, 338743238211338, 302779683441821 @ -118, -260, -344\n344747694290499, 385775363283903, 141297854009676 @ -5, -417, 277\n370755040673637, 272949480066524, 124725204564288 @ 89, -22, 441\n328046794816634, 182843078041077, 157303657162116 @ 46, 315, 219\n312612031070729, 304783157990735, 330247358971828 @ -39, -71, -169\n213887387271813, 253994341853086, 349358413004203 @ 32, 34, -68\n347747457798306, 261630221530041, 334455794052396 @ -188, 21, -11\n321333902294423, 278477702662040, 224364644755505 @ 19, -19, 17\n108237825726941, 35610289149402, 57738072497155 @ 100, 300, 352\n228640427566623, 349740962250906, 395645995890687 @ -70, -80, -40\n122929893243943, 295620850349055, 367645748609003 @ 7, -15, 22\n188710705759509, 39537915197976, 244070046639375 @ 266, 555, 18\n326524679997679, 250533852558080, 517381016046237 @ -89, 49, -525\n52466227579428, 405493859866272, 437136692807229 @ 94, -130, -60\n252846839137669, 501830561743928, 174987139917361 @ -18, -361, 199\n400141701341444, 470931275755524, 478596389558111 @ -234, -486, -566\n342242716982206, 300311913213267, 419431635736885 @ -116, -57, -340\n298316329793479, 286480417873423, 238686233673836 @ -9, -29, 41\n259982956450299, 265424920849836, 180322543382100 @ 51, 18, 177\n120428404185073, 380251035223090, 396292095528135 @ 24, -104, -18\n364695445471679, 488140992018298, 374012252252511 @ -183, -391, -171\n135087723055996, 244059961860054, 243275120980597 @ 138, 48, 100\n374777372081538, 277007452610697, 177497775303342 @ 100, -59, 35\n268100133514581, 211544793853674, 459733357750683 @ -6, 116, -328\n313364052372949, 292797957834568, 321487649505843 @ -44, -43, -144\n153048696785170, 297129809082289, 395698323167387 @ -18, -17, -10\n403896511032417, 265219235025480, 132911552781240 @ -83, 46, 457\n288056853889317, 165685311923700, 78988299573711 @ 74, 289, 434\n189548568548938, 246436519875182, 278749628233628 @ 180, 56, -19\n271573942692405, 374468155172967, 292507969579698 @ 65, -237, -93\n323712944721171, 275711298835798, 230221196308271 @ 44, -13, -26\n235780818782871, 299813153975214, 313646564952951 @ 25, -41, -36\n198078490245879, 258890355669698, 237290645900911 @ 260, 35, 28\n138169748497080, 301836068943870, 336034301135631 @ 84, -32, -6\n192138101135269, 9814419474638, 198588200764272 @ 121, 472, 153\n362828379531834, 273116925078738, 180407630079271 @ 8, -12, 98\n331945417406159, 230399211435458, 246422171047351 @ -191, 53, 133\n255184706938796, 136664380563662, 515752985355757 @ -50, 200, -284\n330510175765887, 127622234934666, 111491453713455 @ -81, 330, 328\n69741102492183, 206723099530752, 340279978402536 @ 135, 86, 9\n143199884065765, 259077054122245, 313293408588017 @ 105, 25, 8\n355107203360391, 287994199814426, 157229120672763 @ 149, -116, 207\n248680884427257, 245003607481074, 200484501432117 @ -80, 40, 177\n359165136483063, 333996041684922, 264533549979891 @ -127, -156, -51\n288052161896993, 121363534647116, 289359844203936 @ 229, 578, -291\n275595118368031, 203440497139002, 190812621273055 @ 112, 189, 131\n481465651188327, 498509459520210, 474486424704135 @ -395, -402, -344\n203214285274975, 262824240944858, 238936836201439 @ 112, 22, 77\n392446540632329, 267418341285770, 180523598262277 @ -14, 20, -17\n300300923103604, 442335210298168, 286049333349751 @ -164, -166, 98\n185274515490549, 270029199222117, 324932781792192 @ 121, 9, -63\n330150207040379, 218603913180258, 457579877364151 @ -144, 90, -244\n361610692700949, 272176815185613, 194157520763496 @ 9, -7, 33\n294826848181359, 281857869463658, 271413093538831 @ -16, -17, -19\n340281810268127, 285492392058837, 151096537512541 @ 127, -75, 244\n328154491057215, 128708855239070, 206646333325364 @ -97, 296, 125\n398967865436435, 257877611514170, 151653136962639 @ 109, 188, 258\n202815287439645, 365551686243057, 341293021471200 @ 25, -127, -35\n208624907656617, 303643087413892, 141090453849191 @ 68, -47, 254\n116619551648964, 72716652653913, 338620475629266 @ 16, 207, 49\n316570230142779, 157901006004498, 110566093880811 @ 212, 534, 435\n314338616223732, 253170921297471, 250011432131761 @ -10, 51, -16\n394420763021571, 279821714223450, 168564829467909 @ -55, -84, 105\n206030154719246, 214888243398501, 212220927233198 @ 88, 105, 131\n135916879432854, 259121901617574, 408342546804529 @ 86, 24, -100\n380233819990539, 250438488952590, 204758274951771 @ -19, 126, -96\n138711277790175, 195831086658714, 116842370945919 @ 87, 108, 282\n259461044888263, 276856591250010, 269392218573199 @ 168, -12, -92\n355463056862037, 294626660998446, 213089139930039 @ -70, -74, 38\n281596710365429, 65132775235298, 324758356004511 @ 105, 580, -246\n230155650418446, 260314943265657, 348985116267540 @ -72, 21, 13\n367101254842699, 213299406681024, 135381634159912 @ -29, 270, 317\n337061808485374, 289503700056659, 106739935503936 @ 126, -91, 459\n306557011720019, 349154903271462, 389390075976043 @ -104, -117, -143\n291986833642790, 135986714161082, 323181849380703 @ -68, 236, -54\n117467129800871, 270153333417920, 324201457938535 @ 39, 10, 50\n386873576522003, 273915554646812, 162882584373595 @ 9, -35, 152\n227131878807433, 222723165572932, 516385601931555 @ 24, 85, -348\n364558795506319, 491712753098842, 436036363794183 @ -179, -412, -303\n307233195121579, 193221854959498, 368635589041431 @ -74, 152, -168\n197132646713349, 298345080606182, 400559144403791 @ -34, -22, -46\n256292251199541, 127406523088426, 404350076198301 @ 98, 340, -351\n202724738138847, 353439702288314, 275842759321855 @ -67, -74, 110\n277039691560699, 237701297636748, 278840351213461 @ -75, 57, 49\n306695743745592, 260421599612595, 255030018513007 @ 20, 33, -38\n411412237567461, 504759775832424, 331349111712657 @ -268, -435, -103\n303451664068059, 223988227104858, 255251901520797 @ 141, 172, -135\n380928159526205, 184874394184544, 205355461239861 @ 69, 730, -216\n316921393573491, 321610898394289, 269544049860336 @ -85, -91, 9\n308383368890389, 311007480150128, 244804018404841 @ 37, -110, -28\n134872727797959, 261334004232708, 281432806041571 @ 83, 21, 68\n398085827940759, 267007163466018, 176544464059821 @ -61, 24, 15\n42325178021169, 336747067981438, 396362032972741 @ 122, -62, -29\n380806362733647, 217390964642228, 177407224519163 @ 47, 422, 38\n222453738816437, 252691639514225, 318266935310931 @ -71, 29, 54\n310190985779651, 555691814820059, 528304845772979 @ -101, -469, -394\n411571089921107, 273318390231692, 160273656918783 @ -143, -55, 138\n103919147765789, 285514989930638, 308069142729171 @ 81, -8, 54\n370762152609357, 274551717882367, 183350921030834 @ 17, -25, 55\n265309260383703, 346899317882286, 221385870086872 @ -121, -72, 161\n146194102443384, 269229949098939, 397552859434212 @ 6, 11, -27\n258555353731479, 280317423358158, 292991146508991 @ 11, -10, -22\n93735969149514, 300038046930336, 252842823954459 @ 146, -30, 102\n156255290421351, 221851482495678, 370575711685008 @ 55, 72, -47\n335293996391880, 445034921218475, 478787775780920 @ -22, -529, -763\n243383788374767, 321590388038490, 346275589306407 @ -47, -60, -27\n284805421794815, 237091969305896, 319838897259901 @ -33, 70, -76\n302704803401319, 361579027796244, 316965442922862 @ -9, -206, -149\n249574979679029, 302882531124188, 328984670344843 @ -114, -23, 56\n399159228597885, 399155283390747, 216388330291773 @ -151, -761, -140\n254216656237255, 257239332906271, 215474575278986 @ 183, 43, 59\n309060476903887, 296131243214586, 230260623839055 @ -20, -54, 51\n361309786951231, 265876998366954, 199183517131859 @ 15, 24, 5\n300415790046247, 67036168279650, 203749693496631 @ -36, 429, 129\n325094837432734, 307334216853933, 91170650783951 @ -12, -99, 410\n354356212447027, 514673454577098, 543175447114411 @ -206, -288, -241\n307217786003091, 204377715686898, 259940218133895 @ 162, 262, -184\n164008378809255, 329174936953208, 38803200816883 @ -13, -53, 356\n398758243899321, 271577585499180, 221851375810887 @ -166, -5, -122\n211425726374780, 310282304752879, 219220597554166 @ 78, -61, 119\n29050146289071, 186320067823188, 161270768664582 @ 143, 102, 225\n315835731418779, 265416329387178, 154751652389931 @ 156, 24, 227\n199388783008879, 260195691612348, 153073450808511 @ 207, 30, 234\n360237590969448, 337176668057025, 192671106381087 @ -138, -155, 138\n196112888039104, 320806248041023, 487090576103011 @ -26, -49, -154\n336516077444439, 273514998315729, 216348797747169 @ -9, -5, 28\n311053718080071, 246274938176410, 218784339365233 @ 35, 76, 43\n30498865503327, 105264642891717, 215269334221713 @ 127, 185, 168\n195425018433492, 171801649346337, 307070141030073 @ -56, 111, 76\n199749399567339, 169574672145134, 287610268797623 @ -34, 125, 80\n98736980174037, 203915056974430, 248693996843162 @ 53, 80, 133\n100392939820879, 321444442871232, 131329779518238 @ 111, -54, 261\n306754887599199, 375154645566618, 386661509278431 @ -120, -144, -107\n201547193400189, 391686252526738, 272059563874821 @ 62, -184, 45\n395595330610961, 266762332547504, 177297910925569 @ 10, 29, -35\n262359993802960, 255669687008330, 408700528163763 @ -86, 28, -90\n405040283386211, 218621283473356, 170341386412605 @ -125, 478, 72\n128084795855229, 208620760592114, 401185365416455 @ 86, 88, -82\n270516026143991, 315538160930374, 295835257807645 @ 7, -80, -44\n88370163319509, 105005234867958, 184216009705881 @ 108, 206, 197\n167557538765299, 62389483997878, 332960492315431 @ 54, 289, -8\n335064547598687, 270878178081882, 304291955140575 @ -86, 6, -117\n376641967624227, 199474092749520, 329308743713479 @ -37, 390, -734\n372587830364079, 246100547265498, 169052194173759 @ 161, 212, 90\n314009010285119, 318141126962079, 292444055690364 @ 31, -135, -177\n206408338311903, 172460303502810, 131559933018879 @ -68, 110, 256\n130687578735057, 313518956051171, 368108900547243 @ 53, -41, -18\n350526312301868, 184942462706137, 374055228787970 @ 28, 379, -739\n399977823462696, 286702195923747, 162917808851211 @ -60, -175, 134\n189120678569520, 403051170639648, 360061622465343 @ 144, -238, -150\n359186659779021, 450058811353936, 373457761876999 @ -166, -341, -194\n223194656219094, 301278760098548, 203494164629476 @ 134, -58, 127\n359962497749275, 268293246383898, 379410165564103 @ -200, 12, -88\n204210989400069, 145370715989523, 463821607645491 @ -67, 137, -82\n243261462563407, 527715202988886, 288149603396023 @ -5, -399, 20\n398431904829889, 294572699348178, 213735188067724 @ -179, -108, -43\n398120376049454, 251351600464948, 259780534059211 @ -96, 146, -610\n191715902288511, 261080574474774, 316997812379511 @ 63, 23, -16\n109553745578564, 345252506499123, 199249006877646 @ 16, -63, 189\n428203458330909, 344053979056298, 375431201202005 @ -304, -188, -353\n397216421052714, 271114129659780, 173483370981069 @ 16, -22, -12\n402904227191015, 271728512260394, 176216294608063 @ -72, -26, -22\n333042901123594, 252248825289560, 261064746635786 @ -144, 38, 59\n394359965343354, 280759376288332, 163587054342371 @ 86, -154, 94\n282914814929836, 322938184490584, 412075486218283 @ 84, -134, -458\n245617966188466, 239795124283057, 395038638457161 @ 40, 65, -216\n405659336506309, 288756364827806, 121235582168129 @ 6, -346, 791\n6263818263729, 154297393198398, 243751970387886 @ 193, 144, 129\n404814443345897, 251385096576440, 196342338111061 @ -156, 139, -91\n229723050012458, 236045834966471, 398016554553648 @ -8, 59, -123\n397587185769564, 276311308517604, 179376605856888 @ -34, -70, -35\n93069484879924, 244164373479632, 344248366896157 @ 66, 38, 28\n396633713427591, 236983134886824, 229162269251121 @ -141, 191, -201\n380617439626731, 270801582242397, 192911726208201 @ -5, -5, -36\n212639169497355, 326909005396302, 323248235038071 @ 155, -112, -126\n207201067146450, 248049454088391, 288032066111891 @ 62, 45, 14\n90661848532889, 63568619590596, 316666189113661 @ 66, 231, 59\n434297859636680, 372203154526848, 491127018633575 @ -306, -138, -254\n140118677433279, 367918652481938, 289568101682991 @ 71, -115, 60\n235148809608711, 414890457055074, 287049709567599 @ -96, -139, 96\n136642167524242, 49304973792073, 179352043519530 @ 70, 287, 201\n194009103158979, 252248765730048, 255174691333011 @ 181, 45, 24\n394548857068335, 238322661049458, 292936182369231 @ -177, 132, -326\n178651281819609, 451741815438642, 262269027626811 @ 46, -240, 84\n123801832864541, 161265378872840, 415052111581847 @ 85, 146, -94\n110253946952587, 304360612171922, 398901022890043 @ 40, -26, -25\n343565057228253, 175897522163208, 281027529502012 @ -7, 342, -223\n70253716348907, 288397853832350, 398699307026555 @ 114, -11, -47\n314692398138121, 120142913402188, 294503562500329 @ 64, 497, -229\n371918218940451, 143574286753930, 349096897603973 @ -91, 500, -533\n116891638086213, 157427547208527, 374804849159253 @ 17, 123, 12\n134319949534355, 360137665741454, 110318290073097 @ 75, -104, 288\n125474272775479, 95231005074898, 235084289040761 @ 171, 280, 107\n81448089332519, 235763132616318, 481331871554091 @ 57, 45, -99\n97581929789407, 233441694011354, 370383130307903 @ 28, 46, 22\n63601548381486, 62345866898572, 156644792649297 @ 314, 358, 228\n160312836850835, 214462348619534, 419623218770765 @ 13, 74, -73\n269534516989179, 527194131046098, 109531029297141 @ -29, -428, 308\n190481177256894, 213447374754687, 238389251120617 @ 206, 129, 52\n219700260746379, 320077367907498, 349853112598191 @ -54, -48, 6\n295143056105583, 279369624407802, 271682998814483 @ -13, -12, -23\n208627479601359, 35477937039702, 338173961771211 @ -29, 295, 9\n309967083668122, 288802059520206, 183836670512973 @ 172, -72, 108\n204280235388282, 271437931801653, 281376615852915 @ 58, 7, 30\n268197666800430, 243319695651027, 274099119744732 @ -48, 51, 45\n253815870149444, 321447044525183, 413758165170987 @ 76, -103, -330\n311392297738899, 239228711062254, 241549315684692 @ -29, 80, 27\n285498548337782, 300830446076311, 243352723194502 @ 10, -59, 37\n199367978740596, 230817098734452, 262094971243263 @ 104, 78, 42\n142364745975744, 309463221127963, 337836264294071 @ -10, -29, 50\n389222101167679, 313414786068698, 299275120878911 @ -120, -217, -508\n254627506068021, 208401271319220, 248311509517917 @ -118, 73, 137\n237952977641035, 491889356861198, 205923440557691 @ -62, -263, 169\n66314366118147, 213019740601812, 174568703057100 @ 59, 66, 213\n234578194870719, 330670949208258, 402584262105951 @ -57, -65, -74\n330466597264437, 277178845429848, 256857247665207 @ -30, -13, -58\n224704416006495, 205351477673994, 461787840195183 @ -91, 75, -75\n246013637742405, 428206264825230, 456807611621607 @ 62, -306, -370\n296589240779391, 100521779760738, 264092594154207 @ 15, 417, -34\n143154982308183, 244543975688714, 81200657915191 @ 158, 50, 349\n296677173856149, 237055317069348, 99225210752001 @ 134, 117, 415\n188646840748904, 253939933875823, 333756325910161 @ -12, 29, 20\n338694436610023, 161897480867550, 238742768496999 @ -107, 243, 48\n268953079264827, 315441416068528, 303274048518118 @ -61, -58, 11\n256599333651594, 243202591937091, 369986205380907 @ -84, 43, -34\n283759907300051, 395257206360322, 245768377339971 @ -42, -214, 69\n258037222261431, 366114235155138, 216838243489023 @ -62, -123, 146\n44853551771160, 405086326494360, 63860572475601 @ 92, -126, 324\n248758440905376, 233036993128080, 127890412768641 @ -82, 54, 264\n411657146362707, 233182270061562, 184874785920135 @ -138, 500, -208\n337018219068501, 268605301801095, 233895803862534 @ -15, 11, -25\n325484207420901, 302809832866164, 189218178162582 @ 9, -94, 123\n234657811314584, 385264916915493, 448692763606542 @ -24, -153, -183\n293795956787699, 254931870914774, 288968415945699 @ 106, 53, -183\n309470962084383, 290599163052186, 275755992484095 @ 157, -76, -250\n164792221507017, 259577766803636, 250811328958592 @ 125, 26, 77\n317371077342471, 405074158303258, 305242215318799 @ -166, -148, 56\n164432192169807, 212470579914174, 358964844021519 @ 67, 89, -50\n192139044847099, 189180813830926, 464306976676247 @ -24, 103, -124\n271967551607700, 551202132682197, 434879378485764 @ -16, -501, -277\n133895470768731, 296381004926652, 416517255071583 @ 9, -17, -38\n138261654332769, 285564724807050, 282609538982151 @ 106, -12, 54\n222708329612403, 424837795662050, 419490882499279 @ 122, -310, -314\n96815043744415, 461681397417811, 403830335641958 @ 63, -197, -37\n382942713572379, 357060266735398, 256499245163011 @ -46, -533, -401\n373928960409828, 356862450947425, 295404507169354 @ -148, -245, -179\n366592570762779, 209257256398548, 208558403802261 @ 89, 411, -141\n397392061296708, 279257539271397, 143266878288015 @ 80, -149, 378\n146816015565804, 71360826516273, 164182459108736 @ -16, 207, 223\n263513615835412, 149971524581433, 93705007939204 @ 94, 297, 377\n396834654711094, 276913545089895, 195652501992678 @ 6, -87, -255\n294305746007907, 282539430536406, 357700459544535 @ 8, -21, -240\n311731089811598, 159733610269424, 555338951753240 @ -140, 158, -307\n183430769483711, 262140178599790, 348213600533079 @ -17, 19, 12\n190018158343876, 238915580043533, 334375620223335 @ -12, 47, 18\n336281704904379, 264556192783267, 217178293342412 @ 11, 25, 11\n268087161466872, 237888064252759, 216292146328701 @ 224, 113, 24\n219523958873919, 441763789871322, 374525208452031 @ 41, -270, -126\n237936936008331, 203198240982126, 234219279460035 @ -82, 85, 143\n324394846927487, 348995461036826, 386009388556735 @ -182, -76, -20\n208270750807071, 391852571589585, 96467454532014 @ 63, -191, 327\n271770365539538, 259142224917515, 365473475370348 @ 24, 31, -207\n205815994000950, 309237586404915, 435689261197482 @ -72, -29, -49\n347180156555879, 259629002999069, 243106240763908 @ -89, 35, -5\n231826491902435, 326126949045272, 276556221355769 @ -45, -62, 76\n306178936650452, 87836355263949, 173964667744553 @ 34, 513, 176\n183600997074799, 248745213140706, 312172721371157 @ 151, 48, -59\n228505756792016, 297921251527949, 346133355295553 @ -86, -19, 32\n223653876348850, 2923395200213, 261779172980141 @ 22, 427, 64\n222021609733287, 279860542171236, 280956332012970 @ 23, -6, 35\n245406743234943, 239094996251210, 152110871133807 @ 263, 103, 237\n142454920353491, 487205972041069, 216886067194407 @ 27, -235, 162\n303062705992204, 470034697989823, 155551847019886 @ -48, -395, 229\n406823480063949, 251129033526813, 150140871727401 @ -107, 211, 268\n392868244332479, 216195431039898, 190344686628511 @ 73, 648, -221\n371192211933977, 274391764179522, 190426872306708 @ -87, -12, 87\n401341415156511, 251410647074938, 168267790186575 @ -13, 232, 36\n171198358682259, 314470070861583, 325668794757891 @ 43, -49, 6\n281416579793904, 97181321072583, 400989267439101 @ 106, 491, -460\n173656712994128, 304193042796599, 282677800569618 @ 120, -47, 21\n253687548348143, 133550842848476, 287815854343933 @ -81, 178, 68\n328310782419455, 278001974498202, 230743275722943 @ -27, -15, 18\n207444976171679, 280087760134058, 157236220367391 @ 21, -5, 228\n25695201203972, 259744028383686, 152361015975160 @ 268, 24, 235\n360064801596903, 357860131359246, 137974052575119 @ -107, -249, 278\n354674992463119, 240556037214742, 239477850594443 @ 51, 151, -199\n379391234552019, 457244462203818, 472784384822651 @ -226, -264, -233\n250758312332544, 156273839178723, 99138180672686 @ -82, 147, 299\n316644912696709, 389928098471764, 70834502230885 @ 141, -482, 568\n304942681542441, 268659535236976, 234389576191827 @ 32, 11, 12\n164042896347362, 413208420138314, 396224391386834 @ 82, -196, -115\n158721274859719, 254088624078934, 381362023566861 @ -29, 26, 9\n359228276642115, 334177319830850, 351465941637535 @ 53, -344, -838\n322810945299349, 157347807110528, 169645048067065 @ 66, 407, 175\n245239303162309, 519505754352624, 131950477165495 @ -54, -321, 262\n394367996546129, 244332900141898, 160141752949901 @ -54, 212, 175\n357899663464354, 278744201626398, 192090350380511 @ 82, -48, 10\n241224163373947, 352379070368828, 61604481302953 @ 153, -193, 457"

case class Hailstone(x: Long, y: Long, z: Long, xVelocity: Int, yVelocity: Int, zVelocity: Int) {
  def slope: Double = yVelocity.toDouble / xVelocity.toDouble
  def initialPosition: (Long,Long,Long) = (x, y, z)
  def vector: (Int,Int,Int) = (xVelocity, yVelocity, zVelocity)
}

def generatePairs[T](data: List[T]): List[(T, T)] =
  data
    .tails
    .filter(_.nonEmpty)
    .flatMap(xs => xs.tail.map((xs.head, _)))
    .toList

def deriveIntercept(hailstone: Hailstone): Double =
  val xOffset = hailstone.x
  val yOffset = hailstone.y

  val xVelocity = hailstone.xVelocity
  val yVelocity = hailstone.yVelocity

  yOffset - (hailstone.slope * xOffset)

def travellingTowardsPoint(startPoint: Double, targetPoint: BigDecimal, velocity: Double): Boolean =
  if startPoint >= targetPoint then
    if velocity < 0 then true else false
  else if velocity > 0 then true else false

 def calculate2DIntersection(hailstoneA: Hailstone, hailstoneB: Hailstone): Option[(BigDecimal, BigDecimal)] =
  // handle vertical lines where y=mx + b, m would be infinity
  val slopeA = hailstoneA.slope
  val interceptA = deriveIntercept(hailstoneA)

  val slopeB = hailstoneB.slope
  val interceptB = deriveIntercept(hailstoneB)

  // lines are parallel
  if interceptA == interceptB then return None
  if slopeA == slopeB then return None

  val x = (interceptB - interceptA) / BigDecimal(slopeA - slopeB);
  val y = slopeA * x + interceptA;

//  println(f"($x,$y)")

  // now factor in if they are travelling in the right direction
  // get the intersection point and check if both lines are heading towards it
  if travellingTowardsPoint(hailstoneA.x, x, hailstoneA.xVelocity) && travellingTowardsPoint(hailstoneA.y, y, hailstoneA.yVelocity)
    && travellingTowardsPoint(hailstoneB.x, x, hailstoneB.xVelocity) && travellingTowardsPoint(hailstoneB.y, y, hailstoneB.yVelocity) then
    Some(x,y)
  else
    None


  //  y = mx + b
  // where m = slope, b is the y-intercept
  // the hailstone velocities describe the slope and the xyz coords describe the intercepts
  // part 1 doesnt need to factor in the speed if they will actually collide, just if they cross paths in the test area
  // so first detect if there would be a intersection between hailstones if the trajectory was plotted and what the x,y would be
  // then calculate how long it would take each of the hailstones based on the velocity and starting position to reach the x,y
  // if they both match they it would be a collision

def calculate3DIntersection(hailstoneA: Hailstone, hailstoneB: Hailstone): Option[(BigDecimal, BigDecimal, BigDecimal)] =
  /* convert vector to parametric form to solve https://www.youtube.com/watch?v=N-qUfr-rz_Y

  step 1: convert vector form to parametric for 2 linees
  line 1: x = ax + (t1 * axv)
          y = ay + (t1 * ayv)
          z = az + (t1 * azv)

  line 2: x = bx + (t2 * bxv)
          y = by + (t2 * byv)
          z = bz + (t2 * bzv)

  step 2) for intersection it means at a given t1,t2 then x,y,y must be equal so combine to form 3 equations
    x = ax + (t1 * axv) = bx + (t2 * bxv) equation1
    y = ay + (t1 * ayv) = by + (t2 * byv) equation2
    z = az + (t1 * azv) = bz + (t2 * bzv) equation3

  then rearrange to get the unknowns all on 1 side
  eq1 (t1 * axv) = bx + (t2 * bxv)
   -> (t1 * axv) = bx + (t2 * bxv) - ax
   -> (t1 * axv) - (t2 * bxv) = bx - ax

  eq2 (t1 * ayv) = by + (t2 * byv)
   -> (t1 * ayv) = by + (t2 * byv) - ay
   -> (t1 * ayv) - (t2 * byv) = by - ay

  eq3 (t1 * azv) = bz + (t2 * bzv)
   -> (t1 * azv) = bz + (t2 * bzv) - az
   -> (t1 * azv) - (t2 * bzv) = bz - az

  step 3) then just take eq1 and eq2 to solve as simultaneous equations to find the unknowns t1,t2
  eq1 (t1 * axv) - (t2 * bxv) = bx - ax
  eq2 (t1 * ayv) - (t2 * byv) = by - ay

  we want to eliminate the t1 variable by eq1 -eq2.  However t1 is being multipled by different terms.
  So for eq1 multiple each term by ayx and eq2 by axv to even out
  eq1 (t1 * axv) - (t2 * bxv) = bx - ax
   -> (t1 * axv * ayv) - (t2 * bxv * ayv) = (bx - ax) * ayv

  eq2 (t1 * ayv) - (t2 * byv) = by - ay
   -> (t1 * ayv * axv) - (t2 * byv * axv) = (by - ay) * axv
   -> (t1 * axv * ayv) - (t2 * axv * byv) = (by - ay) * axv   with the terms on the left rearranged to follow same order as t1

  now the equations look like this amd we can now perform e1 and eq2 to cancel out (t1 * axv * ayv)
  eq1 (t1 * axv * ayv) - (t2 * bxv * ayv) = (bx - ax) * ayv
  eq2 (t1 * axv * ayv) - (t2 * axv * byv) = (by - ay) * axv

  eq1 - eq2
  - (t2 * bxv * ayv) + (t2 * axv * byv) = ((bx - ax) * ayv) - ((by - ay) * axv)
  -> (t2 * axv * byv) - (t2 * bxv * ayv) = ((bx - ax) * ayv) - ((by - ay) * axv)
  ->  t2 * axv * byv - t2 * bxv * ayv = ((bx - ax) * ayv) - ((by - ay) * axv)

  then get t2 by itself
  t2 * axv * byv - t2 * bxv * ayv = ((bx - ax) * ayv) - ((by - ay) * axv)
  -> t2 (axv * byv - bxv * ayv) = ((bx - ax) * ayv) - ((by - ay) * axv)
  -> val t2 = (((bx - ax) * ayv) - ((by - ay) * axv))/(axv * byv - bxv * ayv)

  then use known t2 to plug into eq1 to find actual t1
  (t1 * axv * ayv) - (t2 * bxv * ayv) = (bx - ax) * ayv
  -> t1 * axv * ayv = (bx - ax) * ayv + (t2 * bxv * ayv)
  -> val t1 = ((bx - ax) * ayv + (t2 * bxv * ayv))/(axv * ayv)

*/
  val (ax, ay, az) = hailstoneA.initialPosition
  val (axv, ayv, azv) = hailstoneA.vector
  
  val (bx, by, bz) = hailstoneB.initialPosition
  val (bxv, byv, bzv) = hailstoneB.vector

  if BigDecimal(axv.toDouble * byv - bxv * ayv) == 0|| BigDecimal(axv.toDouble * ayv) == 0 then
    println("Lines will never intersect")
    return None

  val t2 = (((bx - ax) * ayv) - ((by - ay) * axv))/BigDecimal(axv.toDouble * byv - bxv * ayv)
  val t1 = ((bx - ax) * ayv + (t2 * bxv * ayv))/BigDecimal(axv.toDouble * ayv)

  // calculate intersection and handle errors
  val x1 = ax + (t1 * axv)
  val y1 = ay + (t1 * ayv)
  val z1 = az + (t1 * azv)

  val x2 = bx + (t2 * bxv)
  val y2 = by + (t2 * byv)
  val z2 = bz + (t2 * bzv)

//  println(f"t1:$t1, t2:$t2")
//  println(f"x1:$x1, y1:$y1, z1:$z1, x2:$x2, y2:$y2, z2:$z2")
//  println(x1 == x2)
//  println(y1 == y2)

  if x1 == x2 && y1 == y2 && z1 == z2 then
//  if x1 == x2 && y1 == y2 then // for 2d only
    if t1 > 0 && t2 > 0 then
      // they will intersect in the future
      println("Will intersect")
      Some(x1,y1,z1)
    else if t1 < 0 then
      println("Paths crossed in the past for hailstone A")
      None
    else if t2 < 0 then
      println("Paths crossed in the past for hailstone B")
      None
    else
      // they will intersect in the past
      println("Paths crossed in the past for both hailstones")
      None
  else
    // there is no intersection
    println("No intersection")
    None

def parse(input: String): List[Hailstone] =
  input.linesIterator.map(line =>
    val s"$left @ $right" = line: @unchecked
    val coords = left.split(",")
    val velocities = right.split(",")

    Hailstone(x = coords(0).trim.toLong, y = coords(1).trim.toLong, z = coords(2).trim.toLong
     , xVelocity = velocities(0).trim.toInt, yVelocity = velocities(1).trim.toInt, zVelocity = velocities(2).trim.toInt)
  ).toList

def partOne(input: String, testZone: (Long,Long)) : Unit =
  val hailstones = parse(input)
//  hailstones.foreach(println)

  val hailstonePairs = generatePairs(hailstones)
//  hailstonePairs.foreach(println)

  val totalIntersectInTestZone = hailstonePairs.map(pair =>
    calculate2DIntersection(pair(0),pair(1))
  ).filter( intersection =>
    val intersect = intersection.getOrElse(-BigDecimal(Double.MaxValue),-BigDecimal(Double.MaxValue))
    println(intersect)
    intersect._1 >= testZone._1 && intersect._1 <= testZone._2 && intersect._2 >= testZone._1 && intersect._2 <= testZone._2
  ).map(
    _.get
  ).size

  println(f"Total intersect in test zone: $totalIntersectInTestZone")

def partTwo(input: String) : Unit =
  val hailstones = parse(input)
  //  hailstones.foreach(println)
  val stones = hailstones.map( hailstone => (hailstone.vector._1,hailstone.vector._2))
//  hailstones.map( stone => (Math.abs(stone.vector._1), Math.abs(stone.vector._2), Math.abs(stone.vector._3))).groupBy(identity).map(t => (t._1, t._2.size)).foreach(println)
  hailstones.map( stone => (stone.vector._1, stone.vector._2)).groupBy(identity).map(t => (t._1, t._2.size)).foreach(println)
  stones.diff(stones.distinct).distinct



  println(f"Total intersect in test zone:")

var startTime = System.currentTimeMillis()
partOne(sampleInput, (7,27))
var timeTaken = System.currentTimeMillis() - startTime
println(f"Part One Sample Input Time Taken: $timeTaken ms")

startTime = System.currentTimeMillis()
//partOne(puzzleInput, (200000000000000L, 400000000000000L))
timeTaken = System.currentTimeMillis() - startTime
println(f"Part One Puzzle Input Time Taken: $timeTaken ms")

//startTime = System.currentTimeMillis()
partTwo(puzzleInput)
//timeTaken = System.currentTimeMillis() - startTime
//println(f"Part Two Sample Input Time Taken: $timeTaken ms")
//
//startTime = System.currentTimeMillis()
//partTwo(puzzleInput)
//timeTaken = System.currentTimeMillis() - startTime
//println(f"Part Two Puzzle Input Time Taken: $timeTaken ms")

//t2 = (((hailstoneB.x * hailstoneB.yVelocity) - (hailstoneA.x * hailstoneB.yVelocity) - (hailstoneB.y * hailstoneA.xVelocity) - (hailstoneA.y * hailstoneA.xVelocity)) / hailstoneA.xVelocity / hailstoneB.yVelocity) *- 1
val a = Hailstone(19,13,30,-2,1,-2)
val b = Hailstone(18,19,22,-1,-1,-2)
val c = Hailstone(20,25,34,-2,-2,-4)
val d = Hailstone(12,31,28,-1,-2,-1)
val e = Hailstone(20,19,15,1,-5,-3)
calculate3DIntersection(b, e).get

/* are there any 2 hailstores with the same velocity or equivalent slope
 in the sample, b and c are same slope but c is travelling at twice the speed
 this mean the hailstone needs a particular speed to hit both of these

 other cases
 if two hailstones are parallel then the velocities will dictate the third line
 we could check if there are any parallel hailstones in the puzzle and work from that.
 Find the line that intersects these parallel lines

 other cases
if two hailstones are inverses and heading at each other then this will dictate the intersection point

are there two sets of these to find two distinct points?

Ended up using python z3 solver.  We just need 3 hailstones to establish the line knowing that

rx + (t0 * rxv) == ax + (t0 * axv)
ry + (t0 * ryv) == ay + (t0 * ayv)
rz + (t0 * rzv) == az + (t0 * azv)
rx + (t1 * rxv) == bx + (t1 * bxv)
ry + (t1 * ryv) == by + (t1 * byv)
rz + (t1 * rzv) == bz + (t1 * bzv)
rx + (t2 * rxv) == cx + (t2 * cxv)
ry + (t2 * ryv) == cy + (t2 * cyv)
rz + (t2 * rzv) == cz + (t2 * czv)

where rx = initial x position of the rock to be thrown
rxv = x velocity of the rock to be thrown
t0 = the time required for rock to hit given other rock
ax = hailstone A x initial position
axv = hailstone A x velocity
 */


val x = List((1,1),(2,2),(3,3),(3,3),(3,1),(3,3),(3,3))
x.groupBy(identity).map(t => (t._1, t._2.size))

// below are not working
def checkIfCollisionGivenVelocity(rockVelocity: Int
                                  , hailstoneAInitialPos: Long, hailstoneAVelocity: Double
                                  , hailstoneBInitialPos: Long, hailstoneBVelocity: Double
                                  , hailstoneCInitialPos: Long, hailstoneCVelocity: Double) : Boolean =

  val rockCollidesXWithHailStoneA = (0 to 1000).map( t =>
    hailstoneAInitialPos - (t * Math.abs(rockVelocity-hailstoneAVelocity))    
  ).contains(0)

  val rockCollidesXWithHailStoneB = (0 to 1000).map(t =>
    hailstoneBInitialPos - (t * Math.abs(rockVelocity-hailstoneBVelocity))
  ).contains(0)

  val rockCollidesXWithHailStoneC = (0 to 1000).map(t =>
    hailstoneCInitialPos -  (t * Math.abs(rockVelocity-hailstoneCVelocity))
  ).contains(0)
  
  rockCollidesXWithHailStoneA && rockCollidesXWithHailStoneB && rockCollidesXWithHailStoneC


def checkXVelocities() :Unit =  
  (-100 to 100).foreach( vToTest =>
    val correctVelocity = checkIfCollisionGivenVelocity(vToTest, a.x, a.xVelocity, b.x, b.xVelocity, c.x, c.xVelocity)
    if correctVelocity then
      println(f"X velocity: $vToTest")
      return
     
  )
  println(f"X never found")

def checkYVelocities() :Unit =
  (-100 to 100).foreach( vToTest =>
    val correctVelocity = checkIfCollisionGivenVelocity(vToTest, a.y, a.yVelocity, b.y, b.yVelocity, c.y, c.yVelocity)
    if correctVelocity then
      println(f"Y velocity: $vToTest")
      return

  )
  println(f"Y never found")

def checkZVelocities() :Unit =
  (-100 to 100).foreach( vToTest =>
    val correctVelocity = checkIfCollisionGivenVelocity(vToTest, a.z, a.zVelocity, b.z, b.zVelocity, c.z, c.zVelocity)
    if correctVelocity then
      println(f"Z velocity: $vToTest")
      return

  )
  println(f"Z never found")

checkXVelocities()
checkYVelocities()
checkZVelocities()