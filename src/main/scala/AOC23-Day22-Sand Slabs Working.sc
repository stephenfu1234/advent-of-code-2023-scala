import scala.collection.mutable
import scala.collection.mutable.ListBuffer

val sampleInput = "1,0,1~1,2,1\n0,0,2~2,0,2\n0,2,3~2,2,3\n0,0,4~0,2,4\n2,0,5~2,2,5\n0,1,6~2,1,6\n1,1,8~1,1,9"
//val sampleInput = "0,0,1~0,0,2\n1,0,1~1,0,3\n2,0,1~2,0,1\n0,0,3~2,0,3"
val puzzleInput = "4,8,179~6,8,179\n8,7,70~8,9,70\n6,0,96~8,0,96\n5,5,285~7,5,285\n3,2,133~3,4,133\n7,4,24~7,6,24\n5,1,38~5,2,38\n6,0,51~8,0,51\n0,4,258~0,6,258\n1,0,263~2,0,263\n4,6,98~4,7,98\n1,2,242~1,5,242\n3,8,319~5,8,319\n5,8,41~7,8,41\n5,2,252~5,5,252\n5,5,95~5,7,95\n1,8,294~1,9,294\n4,3,92~4,4,92\n2,7,150~2,7,153\n2,6,57~2,6,60\n0,5,312~0,8,312\n9,1,321~9,3,321\n6,1,50~6,2,50\n3,8,275~6,8,275\n0,4,129~3,4,129\n8,1,245~8,2,245\n1,8,55~4,8,55\n8,5,197~8,7,197\n0,0,159~2,0,159\n3,5,298~5,5,298\n8,4,59~8,6,59\n7,2,32~9,2,32\n0,8,157~0,8,158\n1,1,151~1,3,151\n3,6,203~6,6,203\n0,1,58~0,1,59\n7,2,256~7,4,256\n3,1,72~5,1,72\n8,5,258~8,7,258\n4,1,253~4,2,253\n7,5,194~7,7,194\n0,2,201~0,4,201\n9,1,250~9,1,253\n8,4,147~9,4,147\n4,7,148~4,9,148\n2,4,59~5,4,59\n6,2,132~7,2,132\n5,3,306~7,3,306\n0,3,5~2,3,5\n6,1,183~6,4,183\n4,4,133~6,4,133\n9,0,175~9,0,178\n7,6,50~8,6,50\n2,3,252~4,3,252\n7,1,63~9,1,63\n7,5,201~9,5,201\n0,4,130~0,7,130\n5,5,250~5,8,250\n1,7,17~1,7,17\n2,1,265~5,1,265\n8,3,303~8,3,305\n1,5,331~1,8,331\n6,7,24~6,9,24\n3,7,269~4,7,269\n7,2,318~7,2,321\n3,5,337~3,6,337\n5,9,322~8,9,322\n1,4,327~1,4,327\n3,8,165~3,8,166\n3,5,54~3,8,54\n1,1,47~1,4,47\n4,3,168~7,3,168\n4,2,150~4,4,150\n4,0,334~4,3,334\n1,4,55~1,7,55\n2,0,83~2,3,83\n1,1,149~3,1,149\n7,4,144~7,7,144\n7,4,248~7,6,248\n7,8,155~9,8,155\n5,1,181~5,3,181\n6,8,255~8,8,255\n7,4,33~7,4,35\n3,6,157~3,8,157\n0,8,270~0,9,270\n1,1,226~3,1,226\n5,5,60~5,6,60\n4,4,90~4,7,90\n4,6,158~4,6,159\n2,0,66~5,0,66\n0,0,264~0,2,264\n2,5,145~5,5,145\n6,5,252~6,7,252\n6,7,223~6,9,223\n6,4,207~7,4,207\n0,1,53~0,3,53\n0,0,140~0,2,140\n5,8,321~7,8,321\n4,7,276~4,9,276\n2,6,38~2,7,38\n6,5,101~9,5,101\n3,0,234~3,0,234\n4,6,3~4,8,3\n0,6,228~2,6,228\n0,1,3~2,1,3\n6,2,316~9,2,316\n5,0,36~5,3,36\n7,1,301~9,1,301\n6,8,277~7,8,277\n3,3,126~3,6,126\n1,4,75~4,4,75\n5,7,12~5,8,12\n3,8,261~4,8,261\n5,7,124~5,9,124\n4,0,90~4,2,90\n6,6,160~6,6,162\n6,1,265~6,1,269\n6,2,146~6,5,146\n8,5,203~8,7,203\n7,6,246~9,6,246\n9,6,201~9,9,201\n6,2,344~6,4,344\n2,0,16~4,0,16\n1,4,212~3,4,212\n3,1,144~3,3,144\n2,2,87~2,3,87\n5,9,202~6,9,202\n2,2,254~4,2,254\n0,5,44~2,5,44\n5,2,130~7,2,130\n3,8,68~6,8,68\n5,9,174~6,9,174\n0,2,157~2,2,157\n0,2,248~2,2,248\n7,9,121~7,9,121\n6,5,205~6,8,205\n3,2,278~6,2,278\n6,4,153~6,6,153\n0,3,195~0,3,198\n5,4,167~5,7,167\n7,2,67~7,4,67\n7,4,37~9,4,37\n3,4,159~3,6,159\n5,6,210~5,9,210\n0,0,249~0,3,249\n5,6,279~5,8,279\n1,6,285~4,6,285\n8,4,230~8,7,230\n6,6,319~6,7,319\n7,7,9~7,9,9\n3,0,147~3,1,147\n6,7,196~7,7,196\n3,4,134~3,6,134\n2,2,179~4,2,179\n1,2,80~1,2,82\n8,6,191~8,6,193\n7,0,77~7,2,77\n6,0,61~8,0,61\n3,2,192~3,3,192\n2,1,250~4,1,250\n2,1,67~4,1,67\n5,6,15~5,9,15\n6,7,272~8,7,272\n6,2,260~6,4,260\n3,5,149~5,5,149\n1,0,21~4,0,21\n7,2,220~7,3,220\n4,4,188~4,7,188\n0,8,268~0,9,268\n7,5,230~7,8,230\n6,0,53~6,0,53\n7,0,228~7,0,230\n1,7,176~1,8,176\n4,5,56~4,7,56\n7,9,46~8,9,46\n3,4,35~3,6,35\n4,6,268~4,9,268\n7,1,157~7,4,157\n9,7,309~9,9,309\n7,6,199~7,8,199\n5,7,149~5,8,149\n0,5,226~2,5,226\n7,1,226~7,2,226\n5,2,340~5,5,340\n5,7,203~5,9,203\n6,6,310~6,8,310\n8,4,46~8,7,46\n9,6,30~9,8,30\n7,4,316~9,4,316\n4,7,280~4,8,280\n7,7,133~9,7,133\n1,6,221~1,8,221\n7,6,270~8,6,270\n3,0,250~5,0,250\n5,8,95~7,8,95\n1,5,246~1,6,246\n1,7,151~1,7,153\n6,5,184~8,5,184\n1,5,48~2,5,48\n5,6,341~5,7,341\n7,0,313~7,3,313\n1,8,7~1,9,7\n0,2,181~0,2,182\n2,0,59~5,0,59\n3,0,152~3,2,152\n3,0,183~5,0,183\n5,5,296~8,5,296\n2,6,54~2,7,54\n3,1,41~3,3,41\n6,1,334~6,3,334\n3,6,155~3,9,155\n0,2,187~0,2,189\n7,4,134~8,4,134\n4,0,140~4,1,140\n5,5,170~5,7,170\n3,5,300~4,5,300\n5,2,334~5,5,334\n5,7,54~7,7,54\n0,6,261~0,7,261\n7,7,338~7,8,338\n5,5,156~7,5,156\n6,5,182~6,7,182\n6,7,21~8,7,21\n8,7,238~8,8,238\n3,5,131~3,7,131\n0,6,65~3,6,65\n6,4,27~6,6,27\n5,5,57~8,5,57\n2,6,315~2,9,315\n9,4,144~9,4,145\n5,0,128~7,0,128\n5,1,202~5,3,202\n6,7,266~8,7,266\n1,8,167~1,8,168\n8,5,306~9,5,306\n3,8,69~3,9,69\n0,5,60~2,5,60\n2,9,318~4,9,318\n6,6,316~6,8,316\n7,1,129~9,1,129\n3,8,9~3,8,11\n2,1,69~2,3,69\n0,0,267~0,1,267\n5,4,297~7,4,297\n5,5,136~5,5,140\n8,5,6~9,5,6\n1,7,100~1,9,100\n2,5,265~4,5,265\n7,8,241~7,8,242\n0,0,301~3,0,301\n5,4,115~5,4,117\n1,7,57~3,7,57\n8,8,154~9,8,154\n8,2,294~8,2,297\n6,3,42~8,3,42\n3,7,255~6,7,255\n5,0,56~5,2,56\n3,3,33~4,3,33\n9,4,331~9,6,331\n8,7,261~8,7,263\n2,0,227~2,3,227\n1,5,301~4,5,301\n4,3,235~4,5,235\n6,3,182~9,3,182\n1,8,269~1,8,272\n1,4,318~3,4,318\n3,2,246~5,2,246\n9,2,199~9,4,199\n6,7,201~6,9,201\n4,7,103~4,9,103\n7,8,258~7,8,260\n8,2,262~8,4,262\n1,5,56~1,5,59\n0,8,232~2,8,232\n4,8,93~6,8,93\n2,3,193~2,5,193\n1,8,59~5,8,59\n1,3,333~2,3,333\n8,7,114~8,9,114\n1,1,325~1,3,325\n5,8,174~8,8,174\n9,2,118~9,4,118\n6,1,295~9,1,295\n6,7,323~6,9,323\n2,4,200~2,6,200\n4,5,1~7,5,1\n1,9,17~4,9,17\n6,2,46~7,2,46\n5,1,46~6,1,46\n0,2,55~2,2,55\n6,9,50~9,9,50\n6,4,130~8,4,130\n5,6,297~5,6,299\n4,2,186~5,2,186\n4,1,341~4,3,341\n0,7,267~0,9,267\n0,7,279~0,9,279\n3,6,163~3,8,163\n6,1,237~6,4,237\n4,5,240~5,5,240\n3,9,120~5,9,120\n2,4,320~2,6,320\n9,1,60~9,3,60\n0,2,256~2,2,256\n0,2,315~0,4,315\n0,3,11~0,5,11\n2,2,85~2,4,85\n2,5,161~2,8,161\n4,7,97~6,7,97\n5,4,244~5,5,244\n6,6,333~8,6,333\n1,5,266~1,8,266\n8,2,134~8,3,134\n1,2,324~1,5,324\n4,6,211~4,8,211\n5,2,200~5,4,200\n3,7,96~3,9,96\n0,0,285~3,0,285\n4,2,120~5,2,120\n3,6,7~3,8,7\n1,2,288~3,2,288\n6,0,2~8,0,2\n0,3,149~0,5,149\n5,5,235~5,8,235\n2,3,8~2,3,8\n5,5,22~7,5,22\n0,3,309~2,3,309\n2,6,8~2,9,8\n9,3,61~9,5,61\n4,6,267~5,6,267\n6,2,167~6,4,167\n2,9,284~2,9,285\n7,9,11~7,9,13\n6,5,198~6,7,198\n0,6,264~0,9,264\n5,5,263~7,5,263\n6,3,339~8,3,339\n8,1,132~8,1,132\n2,5,111~2,8,111\n2,0,298~3,0,298\n4,8,122~4,9,122\n2,4,211~4,4,211\n1,5,227~1,8,227\n2,7,17~2,7,19\n7,1,126~7,1,128\n0,7,219~2,7,219\n0,1,254~2,1,254\n9,2,101~9,4,101\n5,2,291~8,2,291\n3,4,325~6,4,325\n3,1,260~5,1,260\n6,6,308~8,6,308\n5,1,125~7,1,125\n3,1,345~3,4,345\n2,1,230~4,1,230\n3,5,234~6,5,234\n0,0,26~3,0,26\n9,8,223~9,9,223\n5,5,179~8,5,179\n7,9,206~8,9,206\n9,3,329~9,6,329\n2,7,107~2,9,107\n3,4,208~4,4,208\n2,0,302~2,2,302\n6,2,231~6,2,231\n5,8,316~5,9,316\n4,2,11~6,2,11\n0,0,57~0,2,57\n0,1,178~0,3,178\n0,3,192~0,6,192\n7,6,224~7,7,224\n1,0,239~1,2,239\n0,0,3~3,0,3\n4,4,8~4,6,8\n9,0,104~9,3,104\n4,6,200~7,6,200\n8,4,136~8,6,136\n4,0,196~4,2,196\n7,1,192~7,3,192\n4,5,320~6,5,320\n0,0,4~2,0,4\n0,4,41~3,4,41\n8,0,20~8,2,20\n4,6,44~7,6,44\n0,0,139~2,0,139\n5,2,260~5,5,260\n2,6,351~5,6,351\n2,5,109~4,5,109\n7,5,305~7,8,305\n6,4,26~8,4,26\n9,4,227~9,4,229\n6,8,150~9,8,150\n9,4,141~9,7,141\n7,6,216~9,6,216\n0,4,136~2,4,136\n3,3,77~4,3,77\n0,4,308~0,6,308\n0,0,28~0,1,28\n3,1,283~3,3,283\n8,5,253~8,5,253\n0,6,152~0,8,152\n1,4,341~1,7,341\n5,8,285~6,8,285\n4,8,56~5,8,56\n5,1,76~5,3,76\n3,1,54~5,1,54\n8,5,40~9,5,40\n4,6,112~6,6,112\n4,9,30~6,9,30\n0,8,292~2,8,292\n2,7,197~2,9,197\n1,0,297~4,0,297\n6,3,119~6,5,119\n2,7,15~2,9,15\n1,0,237~3,0,237\n3,1,12~3,3,12\n7,1,257~7,2,257\n4,2,332~6,2,332\n3,3,171~3,5,171\n8,1,39~8,3,39\n1,4,257~1,7,257\n7,9,118~9,9,118\n5,2,168~7,2,168\n1,2,50~1,2,51\n6,3,181~6,5,181\n1,5,97~1,6,97\n2,5,96~5,5,96\n7,8,239~8,8,239\n5,7,41~7,7,41\n8,8,241~8,9,241\n9,5,213~9,5,214\n2,5,319~2,7,319\n4,8,314~4,9,314\n9,1,174~9,1,176\n7,6,27~9,6,27\n1,6,269~4,6,269\n5,2,337~6,2,337\n3,7,161~3,9,161\n8,5,99~8,7,99\n7,5,210~9,5,210\n0,6,49~2,6,49\n7,2,298~7,4,298\n3,4,206~6,4,206\n0,8,274~2,8,274\n8,3,68~8,5,68\n2,8,214~4,8,214\n7,1,246~7,1,249\n4,7,335~4,8,335\n8,5,206~8,5,207\n2,5,164~2,6,164\n8,5,141~8,6,141\n0,5,61~0,8,61\n9,3,59~9,5,59\n6,1,124~6,2,124\n6,8,125~6,8,128\n4,7,48~4,8,48\n2,2,15~3,2,15\n1,1,343~1,4,343\n5,8,17~8,8,17\n5,4,144~5,5,144\n5,3,204~7,3,204\n3,0,70~5,0,70\n7,3,46~9,3,46\n6,1,272~6,3,272\n4,4,114~7,4,114\n3,9,317~5,9,317\n0,2,48~0,4,48\n3,3,147~3,3,150\n4,3,16~7,3,16\n3,5,136~4,5,136\n4,1,1~4,1,5\n7,1,55~9,1,55\n3,0,222~6,0,222\n1,0,67~3,0,67\n1,1,61~4,1,61\n6,0,49~6,2,49\n7,0,8~7,1,8\n2,1,87~4,1,87\n0,8,335~2,8,335\n5,1,62~6,1,62\n8,2,72~8,3,72\n1,6,288~1,9,288\n5,3,2~5,5,2\n0,5,89~2,5,89\n6,5,147~6,8,147\n7,4,100~7,6,100\n6,8,295~6,8,297\n1,3,11~1,6,11\n9,3,214~9,4,214\n7,9,72~9,9,72\n7,8,58~9,8,58\n6,2,288~6,4,288\n0,6,142~1,6,142\n7,7,236~8,7,236\n4,2,99~4,4,99\n0,9,212~2,9,212\n7,2,34~7,2,36\n0,9,18~2,9,18\n1,7,1~1,7,3\n3,4,40~3,6,40\n0,1,263~2,1,263\n7,5,131~7,7,131\n7,2,259~9,2,259\n3,2,329~3,5,329\n6,3,109~6,6,109\n5,5,171~5,5,173\n1,0,93~4,0,93\n6,1,97~6,4,97\n8,9,2~8,9,5\n9,7,203~9,8,203\n0,4,96~0,5,96\n0,5,54~2,5,54\n7,0,314~8,0,314\n6,6,64~6,6,66\n8,6,54~8,8,54\n5,3,295~7,3,295\n5,7,321~8,7,321\n0,1,289~2,1,289\n0,5,303~3,5,303\n2,0,240~4,0,240\n5,4,299~6,4,299\n2,3,230~2,5,230\n7,4,225~9,4,225\n2,6,11~2,7,11\n6,6,256~6,6,258\n9,3,57~9,5,57\n8,3,27~8,5,27\n6,3,106~9,3,106\n3,4,106~3,5,106\n9,0,318~9,3,318\n9,0,1~9,2,1\n4,6,45~4,8,45\n2,4,43~2,7,43\n2,5,266~2,6,266\n5,0,180~6,0,180\n9,0,322~9,1,322\n3,2,261~4,2,261\n5,3,255~5,5,255\n1,2,131~1,5,131\n7,1,29~7,4,29\n7,6,186~7,6,188\n2,2,73~2,4,73\n3,4,173~3,5,173\n7,4,30~7,4,31\n8,3,341~8,5,341\n7,2,135~7,3,135\n2,6,99~2,9,99\n0,3,94~0,5,94\n7,2,311~7,5,311\n3,1,247~3,4,247\n6,2,223~6,4,223\n0,3,176~2,3,176\n6,4,98~9,4,98\n3,3,141~5,3,141\n7,5,347~7,8,347\n3,6,175~4,6,175\n1,3,219~1,3,222\n6,2,12~6,2,14\n2,9,320~3,9,320\n3,3,249~3,6,249\n5,5,282~5,8,282\n5,6,136~7,6,136\n5,1,53~6,1,53\n7,0,173~9,0,173\n6,2,218~8,2,218\n7,8,341~7,9,341\n7,6,218~7,9,218\n5,4,61~6,4,61\n8,6,187~8,6,189\n3,5,152~3,7,152\n1,0,2~4,0,2\n6,8,160~7,8,160\n1,8,166~2,8,166\n8,0,228~8,2,228\n3,2,16~4,2,16\n6,6,260~7,6,260\n6,6,137~6,7,137\n4,1,228~4,2,228\n3,5,259~6,5,259\n4,7,144~4,8,144\n3,8,283~3,8,287\n8,3,199~8,5,199\n8,4,256~8,5,256\n1,0,189~1,3,189\n6,7,92~6,9,92\n2,6,321~2,7,321\n2,4,192~2,7,192\n2,1,82~2,4,82\n3,2,66~5,2,66\n4,7,91~7,7,91\n1,6,319~1,9,319\n1,0,11~1,2,11\n4,3,344~4,5,344\n5,2,122~5,2,124\n6,0,94~6,3,94\n9,0,248~9,3,248\n4,2,175~5,2,175\n6,0,130~7,0,130\n3,0,18~3,0,18\n2,3,253~4,3,253\n2,4,351~4,4,351\n3,1,3~3,4,3\n8,2,216~8,4,216\n4,4,167~4,5,167\n7,9,319~7,9,321\n4,0,99~6,0,99\n1,3,2~1,5,2\n5,6,296~6,6,296\n5,6,36~6,6,36\n6,2,127~6,5,127\n0,4,202~0,4,203\n7,4,241~7,5,241\n4,4,46~6,4,46\n3,3,10~5,3,10\n6,2,8~6,4,8\n2,0,248~4,0,248\n1,3,218~1,5,218\n6,3,51~9,3,51\n2,4,96~4,4,96\n6,4,39~8,4,39\n1,0,94~1,0,95\n1,0,85~1,3,85\n3,5,162~3,7,162\n3,6,205~3,8,205\n3,2,76~3,4,76\n5,6,258~5,9,258\n1,0,246~1,1,246\n2,4,86~2,5,86\n5,6,97~8,6,97\n1,4,120~4,4,120\n1,4,133~2,4,133\n5,7,9~5,9,9\n6,7,117~8,7,117\n2,6,312~2,6,312\n6,0,16~6,2,16\n3,3,48~3,4,48\n0,4,14~1,4,14\n1,2,290~2,2,290\n6,6,184~8,6,184\n9,2,39~9,5,39\n0,5,195~0,8,195\n1,0,156~1,2,156\n3,0,80~3,2,80\n2,8,351~4,8,351\n3,4,95~5,4,95\n1,4,252~1,6,252\n5,6,244~8,6,244\n9,3,198~9,6,198\n1,3,244~1,3,244\n3,4,328~5,4,328\n8,1,34~8,3,34\n7,3,292~7,5,292\n1,3,144~1,6,144\n0,1,1~0,4,1\n3,1,223~6,1,223\n0,3,312~2,3,312\n3,5,34~6,5,34\n2,6,137~4,6,137\n1,5,326~1,8,326\n1,7,290~1,9,290\n0,5,249~2,5,249\n3,4,169~6,4,169\n6,4,3~8,4,3\n5,6,20~5,6,22\n2,2,102~3,2,102\n2,7,2~2,7,5\n3,1,244~3,3,244\n8,1,343~8,4,343\n8,6,109~8,9,109\n4,9,285~7,9,285\n0,8,54~2,8,54\n1,8,329~2,8,329\n2,1,57~5,1,57\n6,2,233~6,2,234\n7,2,183~7,4,183\n0,8,319~0,9,319\n5,5,98~5,5,101\n2,7,53~4,7,53\n3,7,243~5,7,243\n5,0,73~5,4,73\n2,7,78~2,8,78\n1,4,271~3,4,271\n4,1,59~6,1,59\n7,0,160~7,1,160\n7,3,223~8,3,223\n3,3,7~3,3,9\n3,6,207~5,6,207\n4,6,253~6,6,253\n2,1,232~4,1,232\n3,1,344~5,1,344\n1,9,283~4,9,283\n5,1,330~5,4,330\n4,1,70~4,1,71\n3,6,30~6,6,30\n3,0,15~3,1,15\n2,4,166~2,6,166\n4,5,304~4,7,304\n4,4,165~6,4,165\n0,1,269~0,2,269\n0,7,155~0,9,155\n2,5,189~4,5,189\n0,8,76~0,8,78\n1,2,259~4,2,259\n7,6,132~7,6,134\n5,1,44~9,1,44\n0,7,63~0,9,63\n6,4,19~6,6,19\n0,1,253~2,1,253\n5,3,309~7,3,309\n0,3,9~2,3,9\n7,3,330~7,6,330\n5,8,253~6,8,253\n5,9,117~8,9,117\n0,7,4~1,7,4\n6,1,262~6,3,262\n6,6,290~6,8,290\n4,3,212~5,3,212\n7,6,52~7,6,54\n0,5,91~0,8,91\n2,1,86~2,3,86\n6,3,63~6,5,63\n2,0,286~2,2,286\n3,1,347~3,1,347\n5,3,233~5,5,233\n5,5,38~6,5,38\n9,3,54~9,4,54\n0,7,5~0,9,5\n3,6,281~3,8,281\n7,4,240~7,7,240\n5,9,225~6,9,225\n5,3,125~7,3,125\n8,4,6~8,4,7\n1,3,213~1,5,213\n2,4,112~6,4,112\n3,0,244~5,0,244\n7,2,200~9,2,200\n5,9,27~6,9,27\n7,5,147~8,5,147\n2,3,135~2,3,138\n8,1,41~8,2,41\n2,4,56~2,7,56\n2,6,97~2,8,97\n7,3,133~7,4,133\n4,5,238~4,7,238\n2,7,142~5,7,142\n8,1,69~8,4,69\n5,7,144~5,9,144\n3,3,32~3,6,32\n0,4,33~3,4,33\n6,7,62~8,7,62\n3,0,76~5,0,76\n7,9,47~7,9,48\n5,6,236~7,6,236\n2,8,206~4,8,206\n4,3,152~4,3,154\n7,3,72~7,4,72\n2,3,70~3,3,70\n5,9,320~6,9,320\n6,3,132~9,3,132\n0,9,265~2,9,265\n7,5,47~7,6,47\n7,3,253~7,6,253\n4,2,209~4,4,209\n1,2,241~4,2,241\n5,8,254~6,8,254\n5,2,231~5,4,231\n7,0,299~7,2,299\n9,1,105~9,1,107\n8,6,241~8,7,241\n5,6,224~6,6,224\n7,1,47~8,1,47\n1,6,340~1,7,340\n1,5,343~1,6,343\n4,0,225~4,2,225\n6,5,232~7,5,232\n1,7,8~1,9,8\n4,4,271~4,5,271\n1,9,3~4,9,3\n8,7,265~8,9,265\n1,1,135~1,3,135\n6,9,112~9,9,112\n2,2,136~4,2,136\n5,1,187~5,2,187\n1,6,99~1,7,99\n5,5,192~8,5,192\n1,0,191~2,0,191\n3,6,44~3,8,44\n5,7,293~7,7,293\n3,7,251~5,7,251\n1,9,147~4,9,147\n5,1,242~5,4,242\n1,4,262~3,4,262\n1,4,150~1,6,150\n7,3,301~9,3,301\n2,1,268~2,1,268\n7,7,315~7,9,315\n7,8,279~8,8,279\n7,7,20~7,8,20\n3,2,263~3,2,263\n3,7,270~3,9,270\n2,5,317~4,5,317\n5,0,64~5,3,64\n0,3,140~0,4,140\n7,0,195~7,1,195\n6,0,224~7,0,224\n6,4,265~6,7,265\n8,1,293~8,2,293\n7,0,301~9,0,301\n2,3,315~2,5,315\n0,2,190~0,5,190\n7,2,341~7,4,341\n4,2,94~5,2,94\n6,4,48~6,4,51\n4,3,298~6,3,298\n6,0,279~6,2,279\n5,7,296~5,8,296\n1,3,225~1,5,225\n2,1,270~2,4,270\n9,2,63~9,3,63\n5,5,4~7,5,4\n9,8,3~9,9,3\n9,6,202~9,6,205\n7,3,43~9,3,43\n6,3,336~7,3,336\n3,4,122~3,6,122\n6,1,54~8,1,54\n1,6,337~1,9,337\n7,4,244~9,4,244\n6,3,62~6,6,62\n1,1,245~1,5,245\n3,9,31~4,9,31\n0,3,10~0,5,10\n1,2,154~2,2,154\n4,5,93~7,5,93\n2,0,231~4,0,231\n2,6,139~2,7,139\n2,1,96~2,1,98\n3,9,168~4,9,168\n8,7,45~8,9,45\n7,6,227~9,6,227\n5,4,203~6,4,203\n5,4,332~7,4,332\n1,6,57~1,6,57\n7,0,244~7,2,244\n5,5,143~7,5,143\n4,0,178~4,2,178\n4,1,187~4,2,187\n6,6,221~8,6,221\n1,3,329~1,3,331\n7,0,3~7,0,6\n2,5,12~2,8,12\n3,9,53~5,9,53\n2,7,100~2,9,100\n0,2,184~0,4,184\n3,7,18~5,7,18\n5,2,77~5,2,78\n6,0,184~6,1,184\n4,2,275~6,2,275\n8,5,261~8,5,263\n6,5,104~8,5,104\n3,0,279~3,3,279\n9,2,202~9,2,204\n2,8,338~3,8,338\n7,4,313~9,4,313\n4,6,201~4,6,202\n5,5,56~5,7,56\n7,7,57~7,8,57\n4,6,354~4,7,354\n3,1,183~5,1,183\n9,8,63~9,8,66\n5,2,121~5,5,121\n4,2,172~4,4,172\n4,0,295~5,0,295\n2,3,47~2,5,47\n3,1,349~3,2,349\n4,2,160~6,2,160\n4,2,191~4,2,193\n8,1,101~8,4,101\n5,3,98~5,4,98\n3,0,286~3,0,287\n3,4,260~4,4,260\n4,1,259~5,1,259\n6,0,220~6,2,220\n3,8,339~5,8,339\n0,5,309~3,5,309\n4,6,342~6,6,342\n1,8,217~3,8,217\n7,6,46~7,8,46\n9,3,304~9,6,304\n4,7,150~4,7,152\n5,2,184~8,2,184\n7,3,319~7,5,319\n8,2,325~8,5,325\n7,7,43~8,7,43\n2,9,146~5,9,146\n1,5,216~1,7,216\n5,5,147~5,8,147\n3,9,204~5,9,204\n5,2,18~8,2,18\n6,6,39~6,8,39\n4,4,349~4,8,349\n1,7,94~1,9,94\n4,1,93~5,1,93\n3,2,6~3,5,6\n0,7,165~3,7,165\n6,2,192~6,4,192\n5,7,6~7,7,6\n2,1,155~4,1,155\n8,4,107~8,7,107\n5,4,155~7,4,155\n8,6,269~8,8,269\n8,3,321~8,4,321\n9,4,3~9,5,3\n3,6,181~4,6,181\n0,7,95~0,9,95\n8,1,240~8,1,241\n5,3,236~5,3,238\n4,7,51~6,7,51\n4,8,123~7,8,123\n4,5,187~7,5,187\n5,7,57~5,8,57\n1,1,132~1,3,132\n6,4,116~9,4,116\n0,2,14~0,3,14\n0,8,173~3,8,173\n0,0,186~3,0,186\n8,0,127~9,0,127\n6,2,44~6,5,44\n5,0,171~5,2,171\n3,5,258~3,8,258\n7,9,317~7,9,318\n7,6,272~9,6,272\n6,3,176~6,6,176\n6,1,187~6,1,187\n5,6,67~7,6,67\n1,3,321~1,4,321\n7,0,171~7,2,171\n6,5,250~8,5,250\n4,1,280~4,2,280\n0,6,309~3,6,309\n6,3,294~6,5,294\n0,2,56~0,4,56\n4,1,128~6,1,128\n5,0,238~5,2,238\n4,8,313~7,8,313\n2,9,102~4,9,102\n4,7,93~7,7,93\n0,9,25~0,9,27\n2,1,94~4,1,94\n3,3,38~3,4,38\n0,6,197~0,8,197\n2,6,268~2,7,268\n0,7,149~2,7,149\n4,8,4~4,8,6\n9,5,307~9,7,307\n3,2,100~4,2,100\n5,0,241~5,2,241\n0,2,344~2,2,344\n0,8,93~2,8,93\n4,8,124~4,9,124\n4,2,91~6,2,91\n6,3,48~8,3,48\n7,2,75~7,4,75\n8,1,36~8,3,36\n1,8,177~3,8,177\n4,2,182~4,3,182\n2,5,51~4,5,51\n3,4,176~4,4,176\n2,8,159~3,8,159\n0,9,210~2,9,210\n7,1,159~9,1,159\n4,5,264~4,8,264\n0,9,20~0,9,22\n5,9,51~7,9,51\n5,1,190~5,1,192\n3,2,229~6,2,229\n2,9,166~4,9,166\n4,5,346~7,5,346\n6,6,157~6,8,157\n4,8,177~6,8,177\n7,1,72~8,1,72\n5,1,235~5,3,235\n4,1,121~4,4,121\n8,6,275~8,6,277\n9,4,328~9,6,328\n2,3,132~4,3,132\n7,0,227~8,0,227\n1,8,45~3,8,45\n7,1,173~9,1,173\n8,4,28~8,4,28\n6,5,129~7,5,129\n4,8,173~6,8,173\n5,8,202~8,8,202\n1,0,72~3,0,72\n5,0,178~5,2,178\n8,7,233~8,8,233\n7,6,237~7,6,239\n6,6,222~6,8,222\n5,4,291~7,4,291\n2,9,25~2,9,28\n5,7,3~7,7,3\n6,2,5~6,4,5\n6,0,122~6,3,122\n2,4,147~2,7,147\n4,6,247~5,6,247\n2,9,21~2,9,23\n7,2,159~7,2,160\n7,9,203~9,9,203\n2,8,169~2,8,171\n5,0,246~9,0,246\n5,0,292~5,2,292\n6,6,286~6,8,286\n4,6,33~4,7,33\n5,1,126~6,1,126\n5,3,189~5,6,189\n5,5,242~5,7,242\n7,3,304~7,5,304\n7,8,64~8,8,64\n1,4,46~3,4,46\n2,7,102~2,7,105\n1,2,265~1,3,265\n0,4,46~0,6,46\n0,5,147~1,5,147\n6,8,288~8,8,288\n5,6,18~6,6,18\n6,4,322~8,4,322\n1,0,137~1,2,137\n4,6,173~7,6,173\n8,9,120~8,9,120\n2,8,51~5,8,51\n3,3,14~3,6,14\n6,6,150~6,6,152\n0,3,306~0,6,306\n6,9,220~9,9,220\n1,8,228~1,8,231\n9,2,106~9,2,107\n5,4,38~6,4,38\n8,5,245~8,7,245\n4,7,322~5,7,322\n7,1,242~9,1,242\n4,6,283~4,8,283\n1,4,95~1,6,95\n5,6,277~5,8,277\n2,6,63~2,8,63\n4,2,53~6,2,53\n1,5,90~2,5,90\n2,0,247~4,0,247\n0,0,189~0,0,191\n3,9,221~3,9,223\n3,6,183~3,8,183\n3,4,177~3,4,179\n5,3,197~7,3,197\n3,6,334~6,6,334\n9,7,68~9,9,68\n2,6,42~3,6,42\n6,8,292~9,8,292\n1,9,279~3,9,279\n5,3,13~5,5,13\n4,1,139~4,3,139\n1,6,265~4,6,265\n6,4,287~6,5,287\n7,8,244~7,9,244\n0,5,255~2,5,255\n3,2,190~4,2,190\n1,0,161~1,2,161\n3,7,278~3,9,278\n2,5,87~5,5,87\n1,2,103~2,2,103\n6,0,181~6,0,183\n6,0,125~8,0,125\n0,8,180~1,8,180\n8,5,180~8,5,180\n2,3,250~3,3,250\n6,5,59~6,8,59\n5,0,74~6,0,74\n4,6,246~5,6,246\n7,7,340~9,7,340\n5,1,138~5,3,138\n3,5,104~5,5,104\n2,4,251~2,7,251\n0,5,227~0,8,227\n7,3,321~7,5,321\n4,3,130~6,3,130\n3,6,129~3,7,129\n8,8,61~9,8,61\n3,8,48~3,8,48\n6,4,224~8,4,224\n1,0,262~1,3,262\n2,3,36~2,6,36\n0,0,5~1,0,5\n7,0,225~7,2,225\n4,4,302~5,4,302\n2,5,13~2,7,13\n2,3,228~4,3,228\n4,8,277~4,9,277\n6,8,67~8,8,67\n8,6,51~8,8,51\n8,4,213~8,6,213\n3,5,148~3,6,148\n3,8,74~4,8,74\n7,4,186~9,4,186\n3,8,71~3,8,71\n4,5,306~6,5,306\n6,9,52~9,9,52\n0,6,314~0,7,314\n2,5,199~5,5,199\n5,9,33~8,9,33\n0,8,318~3,8,318\n4,5,268~6,5,268\n0,2,139~0,6,139\n0,7,276~0,8,276\n6,9,224~8,9,224\n0,8,75~3,8,75\n4,6,156~6,6,156\n1,2,10~1,4,10\n3,6,176~3,6,179\n7,0,22~8,0,22\n1,4,7~3,4,7\n7,6,263~8,6,263\n4,3,148~6,3,148\n3,1,331~3,3,331\n7,3,118~7,6,118\n3,6,6~4,6,6\n6,1,239~9,1,239\n3,1,63~3,1,66\n4,4,160~4,4,163\n7,5,327~9,5,327\n5,3,35~5,6,35\n0,8,1~0,8,1\n9,7,205~9,7,207\n9,0,35~9,2,35\n0,5,62~0,7,62\n3,0,105~4,0,105\n2,5,196~2,7,196\n3,6,210~4,6,210\n6,4,209~8,4,209\n7,3,195~7,5,195\n4,3,337~4,3,338\n3,7,219~3,9,219\n9,2,142~9,4,142\n4,2,157~4,4,157\n5,7,171~5,9,171\n9,6,153~9,8,153\n4,0,60~8,0,60\n7,5,42~7,7,42\n5,5,89~7,5,89\n8,4,318~9,4,318\n6,9,227~6,9,230\n3,1,256~4,1,256\n7,9,1~9,9,1\n6,3,66~8,3,66\n2,0,102~4,0,102\n3,9,280~5,9,280\n5,3,135~5,6,135\n3,2,143~3,4,143\n3,1,284~3,1,286\n7,3,59~7,6,59\n7,2,70~7,4,70\n9,0,58~9,2,58\n4,4,213~4,5,213\n3,0,24~4,0,24\n1,2,79~3,2,79\n0,8,4~1,8,4\n8,1,335~8,4,335\n3,6,124~5,6,124\n5,8,259~5,9,259\n4,2,117~4,4,117\n2,0,228~4,0,228\n1,1,140~2,1,140\n7,3,332~8,3,332\n9,6,33~9,7,33\n3,7,134~3,9,134\n7,8,60~9,8,60\n1,3,93~1,6,93\n8,5,195~9,5,195\n8,1,302~8,1,304\n8,3,232~8,6,232\n0,1,255~1,1,255\n2,3,173~4,3,173\n5,6,138~9,6,138\n8,2,43~9,2,43\n3,8,272~3,8,274\n1,7,11~1,7,14\n3,0,282~3,1,282\n4,8,76~5,8,76\n4,8,181~4,8,183\n3,5,125~3,7,125\n8,3,334~8,6,334\n7,1,56~8,1,56\n4,4,257~6,4,257\n7,7,55~7,8,55\n7,2,48~9,2,48\n1,9,207~4,9,207\n2,7,164~2,9,164\n2,8,2~2,8,3\n9,6,34~9,8,34\n1,2,326~1,4,326\n4,6,339~7,6,339\n6,9,288~7,9,288\n2,8,94~3,8,94\n5,3,190~7,3,190\n1,6,322~1,8,322\n5,5,339~7,5,339\n3,6,293~7,6,293\n1,8,333~4,8,333\n9,4,211~9,5,211\n0,2,51~0,3,51\n4,0,345~4,1,345\n7,5,336~7,7,336\n5,4,342~6,4,342"

class Brick {
  val supporting = mutable.Set[Brick]()
  val supportedBy = mutable.Set[Brick]()
  private var _fallenToZ = 0
  private var _coord1 = (0,0,0)
  private var _coord2 = (0,0,0)

  def this(coord1: (Int,Int,Int), coord2: (Int,Int,Int)) = {
    this()
    _coord1 = coord1
    _coord2 = coord2
  }

  def coord1: (Int,Int,Int) =
    _coord1

  def coord2: (Int, Int, Int) =
    _coord2

  def z: Int =
    Math.min(_coord1._3, _coord2._3)

//  def fallenToZ: Int =
//    _fallenToZ
//
//  def updateFallenToZ(newZ: Int): Unit =
//    _fallenToZ = newZ
//
//  def fallenZPositions: Int =
//    z - _fallenToZ

  def height: Int =
    Math.abs(_coord1._3- _coord2._3)

  def addSupporting(brick: Brick) =
    if !supporting.contains(brick) then supporting.add(brick)

  def removeSupporting(brick: Brick) =
    supporting.remove(brick)

  def addSupportedBy(brick: Brick) =
    if !supportedBy.contains(brick) then supportedBy.add(brick)

  def removeSupportedBy(brick: Brick) =
    supportedBy.remove(brick)

  override def toString(): String = {
    f"[Brick : $_coord1, $coord2";
  }

}


def parse(input: String): List[Brick] =
  input.linesIterator.map(line=>
    val ends = line.split("~")
    val coord1 = ends(0).split(",").map(_.toInt)
    val coord2 = ends(1).split(",").map(_.toInt)
    new Brick((coord1(0), coord1(1), coord1(2)),(coord2(0), coord2(1), coord2(2)))
  ).toList

def overlapping(brick: Brick, otherBrick: Brick): Boolean =
  val brickMinX = Math.min(brick.coord1._1, brick.coord2._1)
  val brickMinY = Math.min(brick.coord1._2, brick.coord2._2)
  val brickMaxX = Math.max(brick.coord1._1, brick.coord2._1)
  val brickMaxY = Math.max(brick.coord1._2, brick.coord2._2)
  val otherBrickMinX = Math.min(otherBrick.coord1._1, otherBrick.coord2._1)
  val otherBrickMinY = Math.min(otherBrick.coord1._2, otherBrick.coord2._2)
  val otherBrickMaxX = Math.max(otherBrick.coord1._1, otherBrick.coord2._1)
  val otherBrickMaxY = Math.max(otherBrick.coord1._2, otherBrick.coord2._2)

  if brickMinX > otherBrickMaxX || otherBrickMinX > brickMaxX then return false

  if brickMinY > otherBrickMaxY || otherBrickMinY > brickMaxY then return false

  true

// K = level, V = list of bricks sitting on that level
val domain = mutable.HashMap[Int, mutable.Set[Brick]]()

def drop(brick:Brick): Unit =
  // when adding to the domain we need to add for both min and max Z values

  // handle the first ever brick
  if domain.isEmpty then
//    brick.updateFallenToZ(1)
    domain(1) = mutable.Set(brick)
    domain(1+brick.height) = mutable.Set(brick)
    return

  var landed = false
  // for all other bricks, each level to see if there is an existing brick that overlaps, starting at the highest level
  domain.keys.toList.sorted.reverse.foreach( level =>
    val bricksAtCurrentLevel = domain(level)
    bricksAtCurrentLevel.foreach( otherBrick =>
      val isOverlapping = overlapping(brick, otherBrick)
      if isOverlapping then
        // store the brick on level above current level
        if !domain.contains(level+1) then domain(level+1) = mutable.Set[Brick]()
        brick.addSupportedBy(otherBrick)
//        brick.updateFallenToZ(level+1)
        otherBrick.addSupporting(brick)
        if !domain(level+1).contains(brick) then domain(level+1).addOne(brick)

        if !domain.contains(level + 1 + brick.height) then domain(level + 1 + brick.height) = mutable.Set[Brick]()
        if !domain(level + 1 + brick.height).contains(brick) then domain(level + 1 + brick.height).addOne(brick)
        landed = true
    )

    if landed then
      return
  )

  if !landed then
    // it must have hit the ground
    domain(1).addOne(brick)
    if !domain.contains(1 + brick.height) then domain(1 + brick.height) = mutable.Set[Brick]()
    domain(brick.height+1).addOne(brick)

def countDisintegrated(): Unit =
  val cannotBeDisintegrated = mutable.Set[Brick]()
  val allBricks = domain.values.flatten.toSet

  allBricks.foreach(brick =>
    if brick.supporting.nonEmpty then
//      println(f"$brick can be disintegrated as it is supporting no one")
//    else
      // check if each of the supporting bricks in turn is supported by more than 1 brick
      brick.supporting.foreach( supportingBrick =>
        if supportingBrick.supportedBy.size < 2 then
          cannotBeDisintegrated.add(brick)
      )
  )

  val totalBricks = domain.values.flatten.toSet.size
  println(f"Total bricks: $totalBricks")
  println(f"Cannot be disintegrated: ${cannotBeDisintegrated.size}")
  println(f"Can be disintegrated: ${totalBricks-cannotBeDisintegrated.size}")

def printSummary(): Unit = {
  domain.foreach { case (level, bricks) =>
    println(f"level: $level contains ${bricks.toList}")
    bricks.foreach(brick =>
      println(f"$brick supported by: ${brick.supportedBy}")
      println(f"$brick supporting: ${brick.supporting}")
    )
    println()
  }
}

def findLongestDisintegrationSequence(brick: Brick): Int =
  val queue = mutable.Queue[Brick]()

  var maxDisintegrated = 0
  var currentDisintegratedChain = 0
  val allBricks = domain.values.flatten.toSet

  queue.addOne(brick)

  while queue.nonEmpty do {
    val brick = queue.dequeue()
//    println(s"New brick to process $brick")
    //clone?
    brick.supporting.foreach(supportedBrick =>
      supportedBrick.removeSupportedBy(brick)
//      println(s"Removing supported by for $supportedBrick")
    )

    brick.supporting.foreach(supportedBrick =>
      if supportedBrick.supportedBy.isEmpty then
      // this supported brick will also fall
        currentDisintegratedChain += 1
//        println(s"$supportedBrick is no longer supported and will also disintegrate")
        queue.addOne(supportedBrick)
    )

  }

//  println(f"$currentDisintegratedChain currentDisintegratedChain")
  currentDisintegratedChain


//def scanSupportedBrick(brick: Brick): Unit =
//  brick.supporting.foreach(supportedBrick =>
//    supportedBrick.removeSupportedBy(brick)
//  )
//
//  brick.supporting.foreach( supportedBrick =>
//    // no more support so it will fall in turn
//    if supportedBrick.supportedBy.isEmpty then
//      currentDisintegratedChain += 1
//
//      // since the supported brick can collapse, run the scan again to check what happens if this in turn is disintegrated
//      scanSupportedBrick(supportedBrick)
//  )

def partOne(input: String): Unit =
  domain.clear()
  val bricks = parse(input)

  // order by the lowest z coord
  // start with the lowest brick and drop until it hits the ground/another brick
  bricks.sortBy( brick => brick.z)
    .zipWithIndex
    .map{
      case (brick, brickId) => (brickId, brick)
    }.foreach(brick =>
      drop(brick._2)
    )

//  printSummary()

  countDisintegrated()


def partTwo(input: String): Unit =

  val bricks = parse(input)

  // not efficient as it recreates the domain every calculation but its fast enough.
  // problem is i need to do a deep clone otherwise updating bricks supporting and supported by is not reset
  // when calculating longest disintegration sequence
  val total = bricks.map( brick =>
    domain.clear()
    bricks.sortBy( brick => brick.z)
    .zipWithIndex
    .map{
      case (brick, brickId) => (brickId, brick)
    }.foreach(brick =>
      drop(brick._2)
    )
    findLongestDisintegrationSequence(brick)
  ).sum

  println(f"Total disintegrated chain: $total")

var startTime = System.currentTimeMillis()
partOne(sampleInput)
var timeTaken = System.currentTimeMillis() - startTime
println(f"Part One Sample Input Time Taken: $timeTaken ms")

startTime = System.currentTimeMillis()
partOne(puzzleInput)
timeTaken = System.currentTimeMillis() - startTime
println(f"Part One Puzzle Input Time Taken: $timeTaken ms")


startTime = System.currentTimeMillis()
partTwo(sampleInput)
timeTaken = System.currentTimeMillis() - startTime
println(f"Part Two Sample Input Time Taken: $timeTaken ms")

startTime = System.currentTimeMillis()
partTwo(puzzleInput)
timeTaken = System.currentTimeMillis() - startTime
println(f"Part Two Puzzle Input Time Taken: $timeTaken ms")
